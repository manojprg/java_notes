Normalization
======================
Youtube link:
https://www.youtube.com/watch?v=5GDTIUVlHB8&t=64s

Normalization in DBMS (Database Management Systems) is the process of organizing a database to reduce 
redundancy and dependency. The main goal of normalization is to design a database schema in such a way 
that it avoids anomalies during data insertion, deletion, and update operations. Anomalies can include 
things like data redundancy, update anomalies, and insertion anomalies.
Here are the most commonly used normal forms:

Closure method: with the help of this we can identifies the candidate key, super key, non-prime key, prime key

How to Find Candidate Keys and Super Keys Using Attribute Closure?
Table {STUD_NO. STUD_NAME, STUD_PHONE. STUD_STATE, STUD_COUNTRY. STUD_AGE}

a. We know that STUD_NO is unique for each student. So 
STUD_NO->STUD_NAME, STUD_NO->STUD_PHONE, STUD_NO->STUD_STATE, 

b. STUD_NO->STUD_COUNTRY and STUD_NO -> STUD_AGE all will be true.
STUD_STATE->STUD_COUNTRY will be true as if two records have same STUD_STATE, they will have same STUD_COUNTRY as well.

Closure method:
{ STUD_NO->STUD_NAME, STUD_NO->STUD_PHONE, STUD_NO->STUD_STATE, STUD_NO->STUD_COUNTRY, 
  STUD_NO -> STUD_AGE, STUD_STATE->STUD_COUNTRY }
  
(STUD_NO, STUD_NAME)+ = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE} 

(STUD_NO)+ = {STUD_NO, STUD_NAME, STUD_PHONE, STUD_STATE, STUD_COUNTRY, STUD_AGE} 

(STUD_NO, STUD_NAME) will be super key but not candidate key because its subset (STUD_NO)+ is equal to all 
attributes of the relation. So, STUD_NO will be a candidate key. 

candidate key: It is the minimal key which can deteremines all other key in an table.
We can have 1 or more no of candidate key in an table which can uniquely identify the rows.
all candidate key are super key;

Super keys:
a super key is a set of attributes or columns that uniquely identifies each tuple (row) in a table. 
In other words, it's a combination of one or more attributes that can uniquely identify a record in a table.
all super key are not candidate key;

Prime and Non-Prime Attributes
Attributes which are parts of any candidate key of relation are called as prime attribute, 
others are non-prime attributes. For Example, STUD_NO in STUDENT relation is prime attribute, others are non-prime attribute.

Functional dependency: It is method which describes the realtionship among attribute among the table;
A -> B (A determines B), B -> C(B determines C) , C -> D (C determines D)
with the help of this we can identifies the candidate key, super key, non-prime key, prime key


First normal form(1NF)
Second normal form(2NF)
Third normal form(3NF)
Boyce & Codd normal form (BCNF)


1. First normal form (1NF)
------------------------------
As per the rule of first normal form, an attribute (column) of a table cannot hold multiple values. 
It should hold only atomic values.

To make the table complies with 1NF we should have the data like this:

emp_id	emp_name	emp_address	emp_mobile
101	Herschel	New Delhi	8912312390
102	Jon	Kanpur	8812121212
102	Jon	Kanpur	9900012222
103	Ron	Chennai	7778881212
104	Lester	Bangalore	9990000123
104	Lester	Bangalore	8123450987

2. Second normal form (2NF)
---------------------------------
A table is said to be in 2NF if both the following conditions hold:

Table is in 1NF (First normal form)
All the non-prime attribute is fully functional dependent on the proper subset of any candidate key of table.

Example: Suppose a school wants to store the data of teachers and the subjects they teach.
 They create a table that looks like this: Since a teacher can teach more than one subjects, 
 the table can have multiple rows for a same teacher.

teacher_id	subject	 	teacher_age
111			Maths	 	38
111			Physics	 	38
222			Biology	 	38
333			Physics	 	40
333			Chemistry	40

Candidate Keys: {teacher_id, subject}
Non prime attribute: teacher_age

The table is in 1 NF because each attribute has atomic values. However, it is not in 2NF because 
non prime attribute teacher_age is dependent on teacher_id alone which is a proper subset of candidate key. 
This violates the rule for 2NF as the rule says “no non-prime attribute is dependent on the proper subset of 
any candidate key of the table”.

To make the table complies with 2NF we can break it in two tables like this:

teacher_details table:

teacher_id	teacher_age
111			38
222			38
333			40

teacher_subject table:

teacher_id	subject
111			Maths
111			Physics
222			Biology
333			Physics
333			Chemistry
Now the tables comply with Second normal form (2NF).

3. Third Normal form (3NF)
---------------------------------
A table design is said to be in 3NF if both the following conditions hold:

Table must be in 2NF
There is should be no Transitive functional dependency in that table.
table(A,B,C
A -> B , B -> C , Here A deteremines B and B deteremines C so C can be determined by A.

Example: Suppose a company wants to store the complete address of each employee, they create a 
table named employee_details that looks like this:

emp_id	emp_name	emp_zip		emp_state		emp_city	       emp_district
1001	John		282005		UP			Agra			Dayal Bagh
1002	Ajeet		222008		TN			Chennai			M-City
1006	Lora		282007		TN			Chennai			Urrapakkam
1101	Lilly		292008		UK			Pauri			Bhagwan
1201	Steve		222999		MP			Gwalior			Ratan
 

Super keys: {emp_id}, {emp_id, emp_name}, {emp_id, emp_name, emp_zip}…so on
Candidate Keys: {emp_id}
Non-prime attributes: all attributes except emp_id are non-prime as they are not part of any candidate keys.

Here, emp_state, emp_city & emp_district dependent on emp_zip. And, emp_zip is dependent on emp_id that makes
 non-prime attributes (emp_state, emp_city & emp_district) transitively dependent on super key (emp_id). 
 This violates the rule of 3NF.

To make this table complies with 3NF we have to break the table into two tables to remove the transitive dependency:

employee table:
---------------
emp_id	emp_name	emp_zip
1001	John		282005
1002	Ajeet		222008
1006	Lora		282007
1101	Lilly		292008
1201	Steve		222999

employee_zip table:
------------------------
emp_zip	emp_state		emp_city	emp_district
282005	UP				Agra		Dayal Bagh
222008	TN				Chennai		M-City
282007	TN				Chennai		Urrapakkam
292008	UK				Pauri		Bhagwan
222999	MP				Gwalior		Ratan

4. Boyce Codd normal form (BCNF)
----------------------------------
It is an advance version of 3NF that’s why it is also referred as 3.5NF. BCNF is stricter than 3NF.
 A table complies with BCNF if it is in 3NF and for every functional dependency X->Y, X should be the super key of the table.

Example: Suppose there is a company wherein employees work in more than one department. They store the data like this:

emp_id	emp_nationality	  emp_dept						dept_type	dept_no_of_emp
1001	Austrian	      Production and planning		D001		200
1001	Austrian		  stores						D001		250
1002	American		  design and technical support	D134		100
1002	American		  Purchasing department			D134		600

Functional dependencies in the table above:
emp_id -> emp_nationality
emp_dept -> {dept_type, dept_no_of_emp}

Candidate key: {emp_id, emp_dept}

The table is not in BCNF as neither emp_id nor emp_dept alone are keys.

To make the table comply with BCNF we can break the table in three tables like this:
emp_nationality table:

emp_id	emp_nationality
1001	Austrian
1002	American
emp_dept table:

emp_dept						dept_type	dept_no_of_emp
Production and planning			D001			200
stores							D001			250
design and technical support	D134			100
Purchasing department			D134			600

emp_dept_mapping table:
-----------------------------
emp_id	emp_dept
1001	Production and planning
1001	stores
1002	design and technical support
1002	Purchasing department

Functional dependencies:
emp_id -> emp_nationality
emp_dept -> {dept_type, dept_no_of_emp}

Candidate keys:
For first table: emp_id
For second table: emp_dept
For third table: {emp_id, emp_dept}

This is now in BCNF as in both the functional dependencies left side part is a key.