

Child c = new parent() java
Java, Child c = new parent(); gives compile time error? java inheritance polymorphism oops.
Child c = new Child(); Object 'c' has access to child's properties as well as its parent class properties. 
Hence accessing c.name and c.age was possible. By using child reference we can call both parent and 
child class (state)Fields and (behavior)methods. And when you assign like this: Parent p = new Child(); 
It is called as up-casting.

Difference between Parent p = new Child(); and Child c = new Child , At runtime there is no difference. 
There is a difference only for the Java compiler (​and type checker). In the first case you are declaring 
that the  new Child() becomes new Nephew() The second effect is a consequence of the fact that, if the 
code compiles and c is declared as a Parent , this implies that you are not using any feature which is 
not already declared in Parent , so every other class which extends from Parent is a valid substitute .

Child c = new parent(); gives compile time error?, In Java, methods are virtual by default (See this for details). 
A Java program to demonstrate that non-method Note that doing "Parent par = new Child()". A child inherits its 
characteristics from its parents but it doesn’t work the other around. Also, similar to the parent-child relationship 
of living beings, a child can have its own properties too in addition to inherited ones. In the programming context, 
the class that derives from other classes is known as derived or sub or child class

---------------------------------------------------------------------------------------------------------------------------------

The main difference between Parent p = new Child(); and Child c = new Child(); is the type of the reference variable used to store the object.

Parent p = new Child(); creates a new object of Child class and stores it in a reference variable of type Parent.
 This is an example of upcasting, where a subclass object is assigned to a superclass reference variable. 
 The object can be accessed only through the methods and variables defined in the Parent class, 
 even though it is actually an instance of Child. This is useful in cases where you want to access the common properties
 of multiple related classes through a single reference.

Child c = new Child(); creates a new object of Child class and stores it in a reference variable of the same type Child. 
Here, you can access all the methods and variables of the Child class directly.

In summary, the main difference between Parent p = new Child(); and Child c = new Child(); 
is the type of the reference variable used to store the object. The former can only access the methods and variables
 defined in the parent class, while the latter can access all the methods and variables defined in the child class.